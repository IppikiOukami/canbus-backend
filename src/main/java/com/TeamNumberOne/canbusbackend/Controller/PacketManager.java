/**
 * @author Mario Everardo Macias
 */
package com.TeamNumberOne.canbusbackend.Controller;

import com.TeamNumberOne.canbusbackend.Model.Packet;
import com.TeamNumberOne.canbusbackend.Repositories.PacketRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * Creates a controller for the Packet model, this allows the population of data in the model,
 * and allows the model to be modified without full access to the model for the end user.
 * */
@CrossOrigin
@Controller // This means that this class is a com.TeamNumberOne.canbusbackend.Controller
@RequestMapping(path = "/packets")
public class PacketManager {
    // This means to get the bean called projectRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private PacketRepository packetRepository;

    @PostMapping(path="/addPacket") // Map ONLY POST Requests
    public @ResponseBody String addNewPacket (
            @RequestParam String packetID,
            @RequestParam String NodeID,
            @RequestParam String Frame_START,
            @RequestParam String CAN_ID,
            @RequestParam String control_Field,
            @RequestParam String data_Field,
            @RequestParam String CRC_Field,
            @RequestParam String ACK,
            @RequestParam String Frame_End
    ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Packet packet = new Packet();
        packet.setPacketID(packetID);
        packet.setNodeID(NodeID);
        packet.setFrame_START(Frame_START);
        packet.setCAN_ID(CAN_ID);
        packet.setControl_Field(control_Field);
        packet.setData_Field(data_Field);
        packet.setCRC_Field(CRC_Field);
        packet.setACK(ACK);
        packet.setFrame_END(Frame_End);
        packetRepository.save(packet);
        return "Packet Saved";
    }

    @GetMapping(path="/allPackets")
    public @ResponseBody Iterable<Packet> getAllPackets() {
        // This returns a JSON or XML with the packets
        return packetRepository.findAll();
    }

    @GetMapping(path = "/NodePackets")
    public @ResponseBody Iterable<Packet> getNodePackets(
            @RequestParam String NodeID
    ){
        Iterable<Packet> packets = packetRepository.findAll();
        List<Packet> nodePackets = new ArrayList<Packet>();
        for(Packet packet:packets){
            if(Objects.equals(packet.getNodeID(), NodeID))
                nodePackets.add(packet);
        }
        return nodePackets;
    }

    @GetMapping(path = "/SinglePacket")
    public @ResponseBody Object getPacket(
            @RequestParam String packetID
    ){
        Optional<Packet> packet = packetRepository.findById(packetID);
        return packet.isPresent()?packet:"No packet by that name";
    }

    @GetMapping(path="/modify")
    public @ResponseBody String editPacket(
            @RequestParam String packetID,
            @RequestParam Packet packetData
    ){
        Optional<Packet> packet = packetRepository.findById(packetID);
        if(packet.isPresent()){
            //TOBE IMPLEMENTED
            System.out.println("TOBE IMPLEMENTED");
        }
        return "Packet updated successfully!";
    }
}

