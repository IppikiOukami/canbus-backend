/**
 * @author Mario Everardo Macias
 */
package com.TeamNumberOne.canbusbackend.Controller;

import com.TeamNumberOne.canbusbackend.Model.Node;
import com.TeamNumberOne.canbusbackend.Repositories.NodeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.Optional;


/**
 * Creates a controller for the Node model, this allows the population of data in the model,
 * and allows the model to be modified without full access to the model for the end user.
 * */
@CrossOrigin
@Controller // This means that this class is a com.TeamNumberOne.canbusbackend.Controller
@RequestMapping(path = "/nodes")
public class NodeManager {
    @Autowired
     // This means to get the bean called projectRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private NodeRepository nodeRepository;

    @PostMapping(path="/addNode") // Map ONLY POST Requests
    public @ResponseBody String addNewNode (
            @RequestParam String NodeName,
            @RequestParam String ProjectID,
            @RequestParam String NodeID,
            @RequestParam String annotation,
            @RequestParam String ICON_PATH,
            @RequestParam String xyPosition
    ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Node node = new Node();
        node.setNodeName(NodeName);
        node.setProjectID(ProjectID);
        node.setNodeID(NodeID);
        node.setAnnotation(annotation);
        node.setICON_PATH(ICON_PATH);
        node.setXyPosition(xyPosition);
        nodeRepository.save(node);
        return "Node Saved";
    }

    @GetMapping(path="/allNodes")
    public @ResponseBody Iterable<Node> getAllNodes() {
        // This returns a JSON or XML with the nodes
        return nodeRepository.findAll();
    }

    @GetMapping(path="/singleNode")
    public @ResponseBody Optional<Node> getSingleNode(
            @RequestParam String nodeName
    ){
        return nodeRepository.findById(nodeName);
    }
}
